@model AppIntegrador.Models.CrearFormularioModel

@{
    ViewBag.Title = "Create";
}

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        .split {
            height: 100%;
            width: 50%;
            position: fixed;
            z-index: 1;
            top: 0;
            overflow-x: hidden;
            padding-top: 250px;
            overflow-y : auto;
        }

        .left {
            overflow-y : auto;
            left: 0;
        }

        .right {
            overflow-y : auto;
            right: 0;
        }

        .centered {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            overflow-y : auto;
        }

            .centered img {
                width: 150px;
                border-radius: 50%;
            }
    </style>
</head>

@using (Html.BeginForm())
{

    @Html.AntiForgeryToken()
    <div class="split-left">
         
        <h2>Crear Formulario</h2>
        <hr />
         <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Formulario.Codigo, "Código", htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.Formulario.Codigo, new { htmlAttributes = new {
                    @class = "form-control",
                    id = "textCode",
                    name = "textCode",
                    @maxlength = "8",
                    required = "required",
                    placeholder = "Código",
                    rows = "5",
                    @onkeyup = "charCount(this)"
                } })
                <div class="counter small pull-right">0/8 caracteres usados</div>
            </div>
        </div>
             
        <div class="form-group">
            @Html.LabelFor(model => model.Formulario.Nombre, htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                <form accept-charset="UTF-8" action="" method="POST">
                    @Html.EditorFor(model => model.Formulario.Nombre, new { htmlAttributes = new {
                       @class = "form-control",
                       id = "textName",
                       name = "textName",
                       @maxlength = "250",
                       required = "required",
                       placeholder = "Nombre del formulario",
                       rows = "5",
                       @onkeyup = "charCount(this)"
                    } })

                    <div class="counter small pull-right">0/250 caracteres usados</div>
                </form>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-success" id="Create" data-toggle="modal" data-target="#myModal" />
                @Html.ActionLink("Cancelar", "Create", "Controller", new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
    </div>
   

    <div class="split right">
        <h2>Banco de secciones</h2>
        <link href="https://unpkg.com/bootstrap-table@1.15.4/dist/bootstrap-table.min.css" rel="stylesheet">

        @using (Html.BeginForm(FormMethod.Get))
        {
            //the following are search options
            <b>
                Opciones de búsqueda:
            </b>

            <form action="PreguntaConOpcionesDeSeleccionController/Index" name="opcionfiltro">
                <input type="radio" name="sel" value="1" id="codigo"
                       onclick="enableElement(this.form.elements['inp1']);"> <text>Codigo</text>
                <input type="text" name="inp1" disabled="disabled">

                <input type="radio" name="sel" value="2"
                       onclick="enableElement(this.form.elements['inp2']);"><text>Nombre</text>
                <input type="text" name="inp2" disabled="disabled">

                <input type="submit"
                       name="submit"
                       value="Filtrar"
                       class="btn" />

                <br />

            </form>

        }
        <br />

        <table id="selectedColumn" class="table table-striped table-bordered table-sm" cellspacing="0" width="100%">
            <col width="50">
            <thead>
                <tr>
                    <th>
                        Seleccionar
                    </th>
                    <th>
                        Codigo
                    </th>
                    <th>
                        Enunciado
                    </th>
                    <th>
                        Operaciones
                    </th>
                </tr>
            </thead>

            @foreach (var item in Model.seccion)
            {
                <tr>
                    <td>
                        <center>
                            <input type="checkbox" class="QuestionCheckbox" />
                        </center>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Codigo)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Nombre)
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.Codigo }) |
                        @Html.ActionLink("Details", "Details", new { id = item.Codigo }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.Codigo })
                    </td>
                </tr>
            }

        </table>
    </div>
}


<style>
    .required:after 
{
    content: "*";
    font-weight: bold;
    color: red; 
}
</style>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/Formularios/CharacterCounter.js"></script>
    <script>
        $(function(){
    $('#myModal').on('show.bs.modal', function(){
        var myModal = $(this);
        clearTimeout(myModal.data('hideInterval'));
        myModal.data('hideInterval', setTimeout(function(){
            myModal.modal('hide');
        }, 3000));
    });
});
    </script>

    <script>
        $(document).ready(function () {
            $('#dtBasicExample').DataTable({
                "ordering": false // false to disable sorting (or any other option)
            });
            $('.dataTables_length').addClass('bs-select');
        });
    </script>

    <script>
        $(function () {
            var includes = $('[data-include]');
            jQuery.each(includes, function () {
                var file = 'views/' + $(this).data('include') + '.html';
                $(this).load(file);
            });
        });
    </script>

    <script type="text/javascript">
    var currentEnabled = null;
    function enableElement(elem) {
        if (currentEnabled) {
            currentEnabled.disabled = true;
        }
        elem.disabled = false;
        currentEnabled = elem;
    }
</script>

    <link href="https://unpkg.com/bootstrap-table@1.15.4/dist/bootstrap-table.min.css" rel="stylesheet">

    <script src="https://unpkg.com/bootstrap-table@1.15.4/dist/bootstrap-table.min.js"></script>

    <script src="https://unpkg.com/bootstrap-table@1.15.4/dist/bootstrap-table.min.js"></script>

}