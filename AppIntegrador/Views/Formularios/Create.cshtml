@model AppIntegrador.Models.CrearFormularioModel

@{
    ViewBag.Title = "Create";
}
<style>

    /*This just stops me getting horizontal scrolling if anything overflows the width*/
    body {
        overflow-x: hidden;
    }
    /*Just removing default browser padding/margin*/
    html,
    body {
        padding:0;
        margin: 0;
    }
    /*Flexbox gives us the flexiness we need. The top just stays put as there is no scrolling on the body due to the page never exceeding viewport height*/
    .Top {
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        z-index: 10;
        height: 100px;
    }
    /*This is our main wrapping element, it's made 100vh high to ensure it is always the correct size and then moved into place and padded with negative margin and padding*/
    .Container {
        display: flex;
        overflow: hidden;
        height: 80vh;
        position: relative;
        width: 100%;
        backface-visibility: hidden;
        will-change: overflow;
    }
    /*All the scrollable sections should overflow and be whatever height they need to be. As they are flex-items (due to being inside a flex container) they could be made to stretch full height at all times if needed.
    WebKit inertia scrolling is being added here for any present/future devices that are able to make use of it.
    */
    .Left,
    .Middle,
    .Right {
        overflow: auto;
        height: auto;
        padding: .5rem;
        -webkit-overflow-scrolling: touch;
        -ms-overflow-style: none;
    }
        /*Entirely optional – just wanted to remove the scrollbar on WebKit browsers as I find them ugly*/
        .Left::-webkit-scrollbar,
        .Middle::-webkit-scrollbar {
            display: none;
        }
    /*  Left and Right are set sizes while the Middle is set to flex one so it occupies all remaining space. This could be set as a width too if prefereable, perhaps using calc.*/
    .Left {
        flex: 0.5;
    }

    .Middle {
        flex: 1;
    }

    .Right {
        flex: 0.5;
    }
</style>
<div class="Top">
    <div class="Left">
        <h2>Crear Formulario</h2>
    </div>
    <div class="Right">
        <br />
        <h2>Banco de Secciones</h2>

        <link href="https://unpkg.com/bootstrap-table@1.15.4/dist/bootstrap-table.min.css" rel="stylesheet">


        <style>
            input.QuestionCheckbox {
                width: 30px;
                height: 30px;
            }
        </style>

@using (Html.BeginForm(FormMethod.Get))
{
    
    //the following are search options
    <b>
        Opciones de búsqueda:
    </b>

    <form action="PreguntaConOpcionesDeSeleccionController/Index" name="opcionfiltro">
        <input type="radio" name="sel" value="1" id="codigo"
               onclick="enableElement(this.form.elements['inp1']);"> <text>Codigo</text>
        <input type="text" name="inp1" disabled="disabled">

        <input type="radio" name="sel" value="2"
               onclick="enableElement(this.form.elements['inp2']);"><text>Nombre</text>
        <input type="text" name="inp2" disabled="disabled">

        <input type="submit"
               name="submit"
               value="Filtrar"
               class="btn" />

        <br />

    </form>

}
<br />
    </div>
</div>

 

<div class="Container">    
     <div class="Left">
         <div class="form-horizontal">

             @using (Html.BeginForm())
             {
                @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Formulario.Codigo, "Código", htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Formulario.Codigo, new
           {
               htmlAttributes = new
               {
                   @class = "form-control",
                   id = "textCode",
                   name = "textCode",
                   @maxlength = "8",
                   required = "required",
                   placeholder = "Código",
                   rows = "5",
                   @onkeyup = "charCount(this)"
               }
           })
                <div class="counter small pull-right">0/8 caracteres usados</div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Formulario.Nombre, htmlAttributes: new { @class = "control-label required col-md-2" })
            <div class="col-md-10">
                <form accept-charset="UTF-8" action="" method="POST">
                    @Html.EditorFor(model => model.Formulario.Nombre, new
               {
                   htmlAttributes = new
                   {
                       @class = "form-control",
                       id = "textName",
                       name = "textName",
                       @maxlength = "250",
                       required = "required",
                       placeholder = "Nombre del formulario",
                       rows = "5",
                       @onkeyup = "charCount(this)"
                   }
               })

                    <div class="counter small pull-right">0/250 caracteres usados</div>
                </form>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-success" id="Create" data-toggle="modal" data-target="#myModal" />
                @Html.ActionLink("Cancelar", "Create", "Controller", new { @class = "btn btn-default" })
            </div>
        </div>
             }
                 </div>
         </div>
 
     <div class="Right">
         @Html.Partial("/Views/Seccion/_SeccionPartial.cshtml", Model.seccion)
     </div>
    </div>

<style>
    .required:after 
{
    content: "*";
    font-weight: bold;
    color: red; 
}
</style>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/Formularios/CharacterCounter.js"></script>
    <script>
        $(function(){
    $('#myModal').on('show.bs.modal', function(){
        var myModal = $(this);
        clearTimeout(myModal.data('hideInterval'));
        myModal.data('hideInterval', setTimeout(function(){
            myModal.modal('hide');
        }, 3000));
    });
});
    </script>

    <script>
        $(document).ready(function () {
            $('#dtBasicExample').DataTable({
                "ordering": false // false to disable sorting (or any other option)
            });
            $('.dataTables_length').addClass('bs-select');
        });
    </script>

    <script>
        $(function () {
            var includes = $('[data-include]');
            jQuery.each(includes, function () {
                var file = 'views/' + $(this).data('include') + '.html';
                $(this).load(file);
            });
        });
    </script>

    <script type="text/javascript">
    var currentEnabled = null;
    function enableElement(elem) {
        if (currentEnabled) {
            currentEnabled.disabled = true;
        }
        elem.disabled = false;
        currentEnabled = elem;
    }
</script>

    <link href="https://unpkg.com/bootstrap-table@1.15.4/dist/bootstrap-table.min.css" rel="stylesheet">

    <script src="https://unpkg.com/bootstrap-table@1.15.4/dist/bootstrap-table.min.js"></script>

    <script src="https://unpkg.com/bootstrap-table@1.15.4/dist/bootstrap-table.min.js"></script>

}